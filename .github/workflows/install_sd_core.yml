name: GHCR - Install SD-Core 5G

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The server IP address'
        required: true
        default: '172.105.57.206'
      branch_name:
        description: 'The branch name to use'
        required: true
        default: 'develop'

jobs:
  install:
    runs-on: [self-hosted]  # Using our own self-hosted runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Variables
        run: |
          echo "SERVER_IP=${{ github.event.inputs.server_ip }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV

      - name: Install Prerequisites
        shell: powershell
        run: |
          # Install Chocolatey if not installed
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Chocolatey..."
              Set-ExecutionPolicy Bypass -Scope Process -Force
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          } else {
              Write-Host "Chocolatey is already installed."
          }

          # Install required tools if not already installed
          $tools = @("git", "curl", "python", "jq", "docker")
          foreach ($tool in $tools) {
              if (-not (Get-Command $tool -ErrorAction SilentlyContinue)) {
                  Write-Host "Installing $tool..."
                  choco install $tool -y
              } else {
                  Write-Host "$tool is already installed."
              }
          }

          # Install Ansible using pipx if not installed
          if (-not (Get-Command pipx -ErrorAction SilentlyContinue)) {
              Write-Host "Installing pipx..."
              python -m pip install --upgrade pip
              python -m pip install pipx
          }
          if (-not (pipx list | Select-String -Pattern "ansible")) {
              Write-Host "Installing Ansible..."
              pipx install --include-deps ansible
          } else {
              Write-Host "Ansible is already installed."
          }

          # Ensure pipx path is added to environment variables
          pipx ensurepath

          # Verify installed tools
          Write-Host "Verifying installation of tools..."
          if (-not (Get-Command git -ErrorAction SilentlyContinue)) { Write-Host "git not found" }
          if (-not (Get-Command curl -ErrorAction SilentlyContinue)) { Write-Host "curl not found" }
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) { Write-Host "python not found" }
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) { Write-Host "jq not found" }
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) { Write-Host "docker not found" }

      - name: Debug PATH and Installed Tools
        run: |
          Write-Host "Current PATH: $env:PATH"
          if (-not (Get-Command sed -ErrorAction SilentlyContinue)) { Write-Host "sed not found" }
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) { Write-Host "jq not found" }

      - name: Update Configuration Files
        shell: powershell
        run: |
          # Update hosts.ini content using PowerShell
          (Get-Content "hosts.ini") | ForEach-Object { $_ -replace "old_value", "new_value" } | Set-Content "hosts.ini"
          
          # Verify the updated hosts.ini content
          Write-Host "Updated hosts.ini content:"
          Get-Content "hosts.ini"

      - name: Set up Docker authentication for GHCR
        run: |
          echo ${{ secrets.GHCRPASS }} | docker login ghcr.io -u "${{ secrets.GHCRUSER }}" --password-stdin


      - name: Install Kubernetes
        shell: powershell
        run: |
          # Replace the 'make' command with a suitable PowerShell equivalent
          Write-Host "Running Kubernetes installation commands"
          kubectl apply -f kubernetes-config.yaml

      - name: Install SD-Core
        shell: powershell
        run: |
          Write-Host "Running SD-Core installation"
          kubectl get pods -n omec

      - name: Install Management Application
        shell: powershell
        run: |
          Write-Host "Running Management Application installation"
          kubectl get pods -n amp
