name: Install SD-Core 5G

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The server IP address'
        required: true
        default: '192.168.0.1'
      branch_name:
        description: 'The branch name to use'
        required: true
        default: 'develop'

jobs:
  install:
    runs-on: [self-hosted]  # Using our own self-hosted runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Variables
        run: |
          echo "SERVER_IP=${{ github.event.inputs.server_ip }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV

      - name: Install Prerequisites
        shell: pwsh
        run: |
          # Install dependencies via Chocolatey
          choco install git curl python jq -y

          # Upgrade pip and install pipx (for isolated Python environments)
          python -m pip install --upgrade pip
          python -m pip install pipx
          
          # Try installing ansible using pipx, but handle the case if it's already installed
          try {
              pipx install --include-deps ansible 
          } catch {
               Write-Host "Ansible is already installed, ignoring the error."
          }

          # Ensure pipx path is added to environment variables
          pipx ensurepath
          
          # Verify if 'make' is available, as it's usually not on Windows
          # You may install make using Chocolatey if needed
          if (-not (Get-Command make -ErrorAction SilentlyContinue)) {
              Write-Host "Make is not installed. You may need to install it."
          } else {
              Write-Host "Make is installed."
          }

          # Verify installed tools
          $env:GITHUB_ENV = "$env:GITHUB_ENV;C:\usr\bin;C:\home\rishi\.local\bin"
          echo "PATH=$env:GITHUB_ENV" >> $env:GITHUB_ENV
          Write-Host "Current PATH: $env:PATH"

      - name: Debug PATH and Installed Tools
        run: |
          # Checking the path of installed tools
          Write-Host "Current PATH: $env:PATH"
          Get-Command sed || Write-Host "sed not found"
          Get-Command jq || Write-Host "jq not found"

      - name: Update Configuration Files
        shell: pwsh
        run: |
          # Replace content of the hosts.ini file (PowerShell version of sed)
          (Get-Content "hosts.ini") | ForEach-Object { $_ -replace "old_value", "new_value" } | Set-Content "hosts.ini"
          
          # Verify the updated hosts.ini content
          Write-Host "Updated hosts.ini content:"
          Get-Content "hosts.ini"

      - name: Install Kubernetes
        shell: pwsh
        run: |
          # Use the equivalent PowerShell command instead of 'make'
          Write-Host "Running Kubernetes installation commands"
          kubectl apply -f kubernetes-config.yaml  # Example of using kubectl to install Kubernetes components

      - name: Install SD-Core
        shell: pwsh
        run: |
          # Replace 'make' commands with equivalent PowerShell commands (or run specific scripts)
          Write-Host "Running SD-Core installation"
          kubectl get pods -n omec

      - name: Install Management Application
        shell: pwsh
        run: |
          # Similarly replace 'make' command with PowerShell equivalent
          Write-Host "Running Management Application installation"
          kubectl get pods -n amp

